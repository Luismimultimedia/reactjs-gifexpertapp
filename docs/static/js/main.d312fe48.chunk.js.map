{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","catch","err","useFetchGifs","gif","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,0BAAMC,SATa,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMlB,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,8DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAKA,EAAIG,OAAOC,iBAAiBZ,QAXhB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOF,EAAU,EAAVA,IACvC,OACE,yBAAKM,UAAU,QACb,yBAAKC,IAAKP,EAAKQ,IAAKN,IACpB,2BAAIA,KCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAiBxC,OAXAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAd,GACJY,EAAS,CACPf,KAAMG,EACNU,SAAS,OAGZK,OAAM,SAACC,GAAD,OAASA,OACjB,CAAC1B,IAEGqB,EDf0BM,CAAa3B,GAAjCa,EAD0B,EAC/BN,KAAaa,EADkB,EAClBA,QAErB,OACE,oCACCA,GAAW,cACV,4BAAKpB,GACL,yBAAKgB,UAAU,+CAETH,EAAOJ,KAAI,SAACmB,GAAD,OAAS,kBAAC,EAAD,eAAaC,IAAKD,EAAIjB,IAAQiB,UEiB/CE,EA1BM,WAAO,IAAD,EAEa5C,mBAAS,CAAC,cAFvB,mBAEhB6C,EAFgB,KAEJ9C,EAFI,KAQvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEQ8C,EAAWtB,KAAM,SAACT,GAAD,OACb,kBAAC,EAAD,CAAS6B,IAAK7B,EAAUA,SAAYA,U,MChB5DgC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.d312fe48.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n    // setCategories(cats => [...cats, e.target.value]);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      if ( inputValue.trim().length > 2 ) {\r\n          setCategories(cats => [inputValue, ...cats]);\r\n          setInputValue('');\r\n      }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n\r\n  \r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n};","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=5&api_key=ctULcAlelCq4brLBKGVEvgdi54cQ7IPJ`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      img: img.images.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, img }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={img} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n    {loading && 'Cargando...'}\r\n      <h3>{category}</h3>\r\n      <div className=\"card-grid animate__animated animate__fadeIn\">\r\n        {\r\n            images.map((gif) => <GifGridItem key={gif.id} {...gif} />)\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifts\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category)\r\n      .then(img => {\r\n        setState({\r\n          data: img,\r\n          loading: false,\r\n        });\r\n      })\r\n      .catch((err) => err);\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GitExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = (value) => {\r\n    //     setCategories([...categories, value]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map ( (category) => \r\n                        <GifGrid key={category} category = {category} />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GitExpertApp;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GitExpertApp from \"./GifExpertApp\"\nimport \"./index.css\";\n\nReactDOM.render(<GitExpertApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}